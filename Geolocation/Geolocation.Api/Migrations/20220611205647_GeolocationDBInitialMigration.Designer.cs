// <auto-generated />
using Geolocation.Api.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Geolocation.Api.Migrations
{
    [DbContext(typeof(GeolocationContext))]
    [Migration("20220611205647_GeolocationDBInitialMigration")]
    partial class GeolocationDBInitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("Geolocation.Api.Entities.Geolocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Geolocations");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.GeolocationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Continent")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContinentCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("GeolocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ip")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GeolocationId")
                        .IsUnique();

                    b.ToTable("GeolocationDetails");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.GeolocationDetails", b =>
                {
                    b.HasOne("Geolocation.Api.Entities.Geolocation", "Geolocation")
                        .WithOne("GeoDetails")
                        .HasForeignKey("Geolocation.Api.Entities.GeolocationDetails", "GeolocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geolocation");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Geolocation", b =>
                {
                    b.Navigation("GeoDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
