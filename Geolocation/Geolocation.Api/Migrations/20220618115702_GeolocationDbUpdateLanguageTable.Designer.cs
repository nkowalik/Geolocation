// <auto-generated />
using Geolocation.Api.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Geolocation.Api.Migrations
{
    [DbContext(typeof(GeolocationContext))]
    [Migration("20220618115702_GeolocationDbUpdateLanguageTable")]
    partial class GeolocationDbUpdateLanguageTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("Geolocation.Api.Entities.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Asn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeolocationDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Isp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GeolocationDetailsId")
                        .IsUnique();

                    b.ToTable("Connection");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("GeolocationDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Plural")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol_native")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GeolocationDetailsId")
                        .IsUnique();

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Geolocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Geolocations");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.GeolocationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Continent")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContinentCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("GeolocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ip")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GeolocationId")
                        .IsUnique();

                    b.ToTable("GeolocationDetails");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Native")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Capital")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country_flag")
                        .HasColumnType("TEXT");

                    b.Property<int>("GeolocationDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Geoname_id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Is_eu")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GeolocationDetailsId")
                        .IsUnique();

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Security", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Crawler_name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Crawler_type")
                        .HasColumnType("TEXT");

                    b.Property<int>("GeolocationDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Is_crawler")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Is_proxy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Is_tor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Proxy_type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Threat_level")
                        .HasColumnType("TEXT");

                    b.Property<string>("Threat_types")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GeolocationDetailsId")
                        .IsUnique();

                    b.ToTable("Security");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.TimeZone", b =>
                {
                    b.Property<int>("TimeZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("GeolocationDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Gmt_offset")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Is_daylight_saving")
                        .HasColumnType("INTEGER");

                    b.HasKey("TimeZoneId");

                    b.HasIndex("GeolocationDetailsId")
                        .IsUnique();

                    b.ToTable("TimeZone");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Connection", b =>
                {
                    b.HasOne("Geolocation.Api.Entities.GeolocationDetails", null)
                        .WithOne("Connection")
                        .HasForeignKey("Geolocation.Api.Entities.Connection", "GeolocationDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Currency", b =>
                {
                    b.HasOne("Geolocation.Api.Entities.GeolocationDetails", null)
                        .WithOne("Currency")
                        .HasForeignKey("Geolocation.Api.Entities.Currency", "GeolocationDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geolocation.Api.Entities.GeolocationDetails", b =>
                {
                    b.HasOne("Geolocation.Api.Entities.Geolocation", null)
                        .WithOne("GeoDetails")
                        .HasForeignKey("Geolocation.Api.Entities.GeolocationDetails", "GeolocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Language", b =>
                {
                    b.HasOne("Geolocation.Api.Entities.Location", null)
                        .WithMany("Languages")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Location", b =>
                {
                    b.HasOne("Geolocation.Api.Entities.GeolocationDetails", null)
                        .WithOne("Location")
                        .HasForeignKey("Geolocation.Api.Entities.Location", "GeolocationDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Security", b =>
                {
                    b.HasOne("Geolocation.Api.Entities.GeolocationDetails", null)
                        .WithOne("Security")
                        .HasForeignKey("Geolocation.Api.Entities.Security", "GeolocationDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geolocation.Api.Entities.TimeZone", b =>
                {
                    b.HasOne("Geolocation.Api.Entities.GeolocationDetails", null)
                        .WithOne("Time_zone")
                        .HasForeignKey("Geolocation.Api.Entities.TimeZone", "GeolocationDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Geolocation", b =>
                {
                    b.Navigation("GeoDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("Geolocation.Api.Entities.GeolocationDetails", b =>
                {
                    b.Navigation("Connection");

                    b.Navigation("Currency");

                    b.Navigation("Location");

                    b.Navigation("Security");

                    b.Navigation("Time_zone");
                });

            modelBuilder.Entity("Geolocation.Api.Entities.Location", b =>
                {
                    b.Navigation("Languages");
                });
#pragma warning restore 612, 618
        }
    }
}
